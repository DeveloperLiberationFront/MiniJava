// Copyright (c) Mark P Jones, Portland State University
// Subject to conditions of distribution and use; see LICENSE for details
// February 3 2008 11:12 AM

/** A jacc parser for the Mini Java Compiler
 */

%package   syntax
%extends   Phase

%{
import compiler.Phase;
import compiler.Handler;
import compiler.Failure;
import compiler.Warning;
import compiler.Position;
import java.util.Vector;
import lexer.MjcLexer;
%}
%semantic Object

// Separators:
%token <Position>       '(' ')' '{' '}' ';' ',' '.'

// Operators:
%token <Position>       '>' '<' EQEQ NEQ               // relational
%token <Position>       '='                            // assignment
%token <Position>       '+' '-' '*' '/'                // arithmetic
%token <Position>       '&' '|' '^' CAND COR '!'       // logic

// Keywords:
%token <Position>       BOOLEAN CLASS ELSE EXTENDS IF INT NEW 
%token <Position>       RETURN STATIC SUPER THIS VOID WHILE DO
%token <Position>       ABSTRACT PUBLIC PRIVATE PROTECTED

// Literals:
%token <Position>       TRUE FALSE NULL
%token <IntLiteral>     INTLIT

// Identifiers:
%token <Id>             IDENT

// Nonterminals:
%type  <ClassType>      class
%type  <Name>           name
%type  <Type>           type extends
%type  <Expression>     literal expr cOrExpr cAndExpr orExpr andExpr xorExpr
%type  <Expression>     eqExpr relExpr addExpr mulExpr unary primary
%type  <LeftHandSide>   lhs field
%type  <Decls>          decl decls
%type  <Args>           args args1
%type  <Formals>        formal formals formals1
%type  <VarDecls>       vardecl vardecls
%type  <Modifiers>      modifiers
%type  <Position>       pos
%type  <Statement>      stmt
%type  <Stmts>          stmts
%type  <Block>          block body
%type  <AssignExpr>     assign 
%type  <NewExpr>        new
%type  <StatementExpr>  exprstmt

%%

program : classes
        ;
classes : classes class         { addClass($2); }
        | /* empty */           { $$ = null; }
        ;
class   : modifiers CLASS IDENT extends '{' decls '}'
                                { checkClassModifiers($1);
                                  $$ = new ClassType($1, $3, $4, $6); }
        ;
extends : /* empty */           { $$ = null; }
        | EXTENDS name          { $$ = new NameType($2); }
        ;
decls   : decls decl            { $$ = $2.link($1); }
        | /* empty */           { $$ = null; }
        ;
decl    : modifiers type vardecls ';'
                                { checkFieldModifiers($1);
                                  $$ = new FieldDecl($1, $2,
                                                       VarDecls.reverse($3)); }
        | modifiers VOID IDENT '(' formals ')' body
                                { checkMethodModifiers($1, $7);
                                  $$ = new MethDecl($1, null, $3, $5, $7); }
        | modifiers type IDENT '(' formals ')' body
                                { checkMethodModifiers($1, $7);
                                  $$ = new MethDecl($1, $2,   $3, $5, $7); }
        ;
modifiers
	: pos			{ $$ = new Modifiers($1); }
	| modifiers PUBLIC      { setPublic($1); }
	| modifiers PRIVATE     { setPrivate($1); }
	| modifiers PROTECTED   { setProtected($1); }
	| modifiers ABSTRACT    { setAbstract($1); }
	| modifiers STATIC      { setStatic($1); }
	;
pos     : /* empty */           { $$ = lexer.getPos(); }
        ;
type    : INT                   { $$ = Type.INT; }
        | BOOLEAN               { $$ = Type.BOOLEAN; }
        | name                  { $$ = new NameType($1); }
        ;
name    : IDENT			{ $$ = new Name($1); }
        | name '.' IDENT        { $$ = new Name($1, $3); }
        ;
vardecls: vardecls ',' vardecl  { $$ = $3.link($1); }
        | vardecl
        ;
vardecl : IDENT                 { $$ = new VarDecls($1); }
        ;
formals : formals1              { $$ = $1; }
        | /* empty */           { $$ = null; }
        ;
formals1: formals1 ',' formal   { $$ = $3.link($1); }
        | formal
        ;
formal  : type IDENT            { $$ = new Formals($1,$2); }
        ;
body    : /* empty */ ';'       { $$ = null; }
        | block
        ;
stmt    : /* empty */ ';'       { $$ = new Empty($1); }
        | IF '(' expr ')' stmt  { $$ = new IfThenElse($1, $3, $5, null); }
        | IF '(' expr ')' stmt ELSE stmt
                                { $$ = new IfThenElse($1, $3, $5, $7); }
        | WHILE '(' expr ')' stmt
                                { $$ = new While($1, $3, $5); }
        | DO stmt WHILE '(' expr ')' ';'
                                { $$ = new DoWhile($1, $5, $2); }
        | exprstmt ';'          { $$ = new ExprStmt($2, $1); }
        | RETURN ';'            { $$ = new Return($1); }
        | RETURN expr ';'       { $$ = new Return($1, $2); }
        | block
        ;
block   : '{' stmts '}'         { $$ = new Block($1, Stmts.reverse($2)); }
        ;
exprstmt: call
        | new
        | assign
        ;
stmts   : /* empty */           { $$ = null; }
        | stmts stmt            { $$ = new BlockStatement($2,$1); }
        | stmts type pos vardecls ';'
                                { $$ = new LocalVarDecl($3,$2,
                                                   VarDecls.reverse($4),$1); }
        ;
expr    : assign
        | cOrExpr
        ;
assign  : lhs '=' expr          { $$ = new AssignExpr($2, $1, $3); }
        ;
lhs     : name                  { $$ = new NameAccess($1); }
        | field
        ;
cOrExpr : cOrExpr COR cAndExpr  { $$ = new CondOrExpr($2, $1, $3); }
        | cAndExpr
        ;
cAndExpr: cAndExpr CAND orExpr  { $$ = new CondAndExpr($2, $1, $3); }
        | orExpr
        ;
orExpr  : orExpr '|' xorExpr    { $$ = new BitOrExpr($2, $1, $3); }
        | xorExpr
        ;
xorExpr : xorExpr '^' andExpr   { $$ = new BitXorExpr($2, $1, $3); }
        | andExpr
        ;
andExpr : andExpr '&' eqExpr    { $$ = new BitAndExpr($2, $1, $3); }
        | eqExpr
        ;
eqExpr  : eqExpr EQEQ relExpr   { $$ = new EqualExpr($2, $1, $3); }
        | eqExpr NEQ  relExpr   { $$ = new NotEqualExpr($2, $1, $3); }
        | relExpr
        ;
relExpr : relExpr '<' addExpr   { $$ = new LessThanExpr($2, $1, $3); }
        | relExpr '>' addExpr   { $$ = new GreaterThanExpr($2, $1, $3); }
        | addExpr
        ;
addExpr : addExpr '+' mulExpr   { $$ = new AddExpr($2, $1, $3); }
        | mulExpr
        ;
mulExpr : mulExpr '*' unary     { $$ = new MulExpr($2, $1, $3); }
	| mulExpr '/' unary     { $$ = new DivExpr($2, $1, $3); }
        | unary
        ;
unary   : name			{ $$ = new NameAccess($1); }
        | primary
	| '-' unary		{ $$ = new NegExpr($1, $2); }
	| '!' unary		{ $$ = new NotExpr($1, $2); }
        ;
primary : literal
        | THIS                  { $$ = new This($1); }
        | '(' expr ')'          { $$ = $2; }
        | new
        | field
        | call
        ;
literal : INTLIT
        | TRUE                  { $$ = new BooleanLiteral($1, true); }
        | FALSE                 { $$ = new BooleanLiteral($1, false); }
        | NULL                  { $$ = new NullLiteral($1); }
        ;
new     : NEW name '(' ')'      { $$ = new NewExpr($1, $2); }
        ;
field	: primary '.' IDENT	{ $$ = new ObjectAccess($1, $3); }
        | SUPER '.' IDENT       { $$ = new SuperAccess($3); }
        ;
call    : name '(' args ')'     { $$ = new NameInvocation($1, $3); }
        | primary '.' IDENT '(' args ')'
                                { $$ = new ObjectInvocation($1, $3, $5); }
        | SUPER '.' IDENT '(' args ')'
                                { $$ = new SuperInvocation($3, $5); }
        ;
args    : /* empty */           { $$ = null; }
        | args1                 { $$ = Args.reverse($1); }
        ;
args1   : args1 ',' expr        { $$ = new Args($3, $1); }
        | expr                  { $$ = new Args($1, null); }
        ;

%%
    private MjcLexer    lexer;
    private ClassType[] classes;
    private int         used = 0;
    private boolean     parsed = false;

    public MjcParser(Handler handler, MjcLexer lexer) {
        super(handler);
        this.lexer = lexer;
        lexer.nextToken();
        parsed = parse();
    }

    private void yyerror(String msg) {
        report(new Failure(lexer.getPos(), msg));
    }

    private void addClass(ClassType cls) {
        if (classes==null) {
            classes = new ClassType[1];
        } else if (used>=classes.length) {
            ClassType[] newClasses = new ClassType[2*classes.length];
            for (int i=0; i<classes.length; i++) {
                 newClasses[i] = classes[i];
            }
            classes = newClasses;
        }
        classes[used++] = cls;
    }

    public ClassType[] getClasses() {
        if (parsed) {
            ClassType[] result = new ClassType[used];
            for (int i=0; i<used; i++) {
                result[i] = classes[i];
            }
            return result;
        } else {
            return null;
        }
    }

    void setPublic(Modifiers mods) {
      dontRepeat (mods, Modifiers.PUBLIC,    "public");
      cantCombine(mods, Modifiers.PRIVATE,   "private and public");
      cantCombine(mods, Modifiers.PROTECTED, "protected and public");
      mods.set(Modifiers.PUBLIC);
    }

    void setPrivate(Modifiers mods) {
      dontRepeat (mods, Modifiers.PRIVATE,   "private");
      cantCombine(mods, Modifiers.PUBLIC,    "public and private");
      cantCombine(mods, Modifiers.PROTECTED, "protected and private");
      cantCombine(mods, Modifiers.ABSTRACT,  "abstract and private");
      mods.set(Modifiers.PRIVATE);
    }

    void setProtected(Modifiers mods) {
      dontRepeat (mods, Modifiers.PROTECTED, "protected");
      cantCombine(mods, Modifiers.PUBLIC,    "public and protected");
      cantCombine(mods, Modifiers.PRIVATE,   "private and protected");
      mods.set(Modifiers.PROTECTED);
    }

    void setAbstract(Modifiers mods) {
      dontRepeat (mods, Modifiers.ABSTRACT,  "abstract");
      cantCombine(mods, Modifiers.PRIVATE,   "private and abstract");
      mods.set(Modifiers.ABSTRACT);
    }

    void setStatic(Modifiers mods) {
      dontRepeat (mods, Modifiers.STATIC,  "static");
      mods.set(Modifiers.STATIC);
    }

    void dontRepeat(Modifiers mods, int flags, String msg) {
      if (mods.includes(flags)) {
        report(new Warning(mods.getPos(),
                           "Repeated use of " + msg + " modifier"));
      }
    }

    void cantCombine(Modifiers mods, int flags, String msg) {
      if (mods.includes(flags)) {
        report(new Failure(mods.getPos(), "Cannot combine " + msg));
      }
    }

    void checkClassModifiers(Modifiers mods) {
      if (mods.includes(Modifiers.PUBLIC
                       |Modifiers.PRIVATE
                       |Modifiers.PROTECTED)) {
        report(new Failure(mods.getPos(), "Illegal class access modifier"));
      }
    }

    void checkFieldModifiers(Modifiers mods) {
      if (mods.includes(Modifiers.ABSTRACT)) {
        report(new Failure(mods.getPos(), "A field cannot be abstract"));
      }
    }

    void checkMethodModifiers(Modifiers mods, Block body) {
      if (mods.includes(Modifiers.ABSTRACT) && body!=null) {
        report(new Failure(mods.getPos(),
               "An abstract method cannot have a body"));
      }
    }
